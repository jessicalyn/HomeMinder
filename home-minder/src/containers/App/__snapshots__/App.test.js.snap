// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Component App should match the snapshot with the data passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    fetchAllItems={
      [MockFunction] {
        "calls": Array [
          Array [
            "http://localhost:3001/api/v1/home",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": Promise {},
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <header
          className="app-header"
        >
          <h1>
            HomeMinder
          </h1>
          <NavLink
            className="nav-link"
            to="/"
          >
            Home
          </NavLink>
          <NavLink
            className="nav-link"
            to="/audit"
          >
            Audit
          </NavLink>
        </header>,
        <div
          className="app-container"
        >
          <Switch>
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(HomeContainer)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              exact={true}
              path="/"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Audit)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/audit"
            />
            <Route
              path="/item/:id"
              render={[Function]}
            />
            <Route
              component={[Function]}
            />
          </Switch>
        </div>,
      ],
      "className": "app",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1>
              HomeMinder
            </h1>,
            <NavLink
              className="nav-link"
              to="/"
            >
              Home
            </NavLink>,
            <NavLink
              className="nav-link"
              to="/audit"
            >
              Audit
            </NavLink>,
            undefined,
          ],
          "className": "app-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "HomeMinder",
            },
            "ref": null,
            "rendered": "HomeMinder",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Home",
              "className": "nav-link",
              "to": "/",
            },
            "ref": null,
            "rendered": "Home",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Audit",
              "className": "nav-link",
              "to": "/audit",
            },
            "ref": null,
            "rendered": "Audit",
            "type": [Function],
          },
          undefined,
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Switch>
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(HomeContainer)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              exact={true}
              path="/"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Audit)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/audit"
            />
            <Route
              path="/item/:id"
              render={[Function]}
            />
            <Route
              component={[Function]}
            />
          </Switch>,
          "className": "app-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(HomeContainer)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                exact={true}
                path="/"
              />,
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Audit)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/audit"
              />,
              <Route
                path="/item/:id"
                render={[Function]}
              />,
              <Route
                component={[Function]}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(HomeContainer)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "exact": true,
                "path": "/",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(Audit)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/audit",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "path": "/item/:id",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <header
            className="app-header"
          >
            <h1>
              HomeMinder
            </h1>
            <NavLink
              className="nav-link"
              to="/"
            >
              Home
            </NavLink>
            <NavLink
              className="nav-link"
              to="/audit"
            >
              Audit
            </NavLink>
          </header>,
          <div
            className="app-container"
          >
            <Switch>
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(HomeContainer)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                exact={true}
                path="/"
              />
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Audit)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/audit"
              />
              <Route
                path="/item/:id"
                render={[Function]}
              />
              <Route
                component={[Function]}
              />
            </Switch>
          </div>,
        ],
        "className": "app",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                HomeMinder
              </h1>,
              <NavLink
                className="nav-link"
                to="/"
              >
                Home
              </NavLink>,
              <NavLink
                className="nav-link"
                to="/audit"
              >
                Audit
              </NavLink>,
              undefined,
            ],
            "className": "app-header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "HomeMinder",
              },
              "ref": null,
              "rendered": "HomeMinder",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Home",
                "className": "nav-link",
                "to": "/",
              },
              "ref": null,
              "rendered": "Home",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Audit",
                "className": "nav-link",
                "to": "/audit",
              },
              "ref": null,
              "rendered": "Audit",
              "type": [Function],
            },
            undefined,
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Switch>
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(HomeContainer)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                exact={true}
                path="/"
              />
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Audit)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/audit"
              />
              <Route
                path="/item/:id"
                render={[Function]}
              />
              <Route
                component={[Function]}
              />
            </Switch>,
            "className": "app-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Route
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": [Function],
                      "compare": null,
                      "displayName": "Connect(HomeContainer)",
                      "type": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  exact={true}
                  path="/"
                />,
                <Route
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": [Function],
                      "compare": null,
                      "displayName": "Connect(Audit)",
                      "type": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  path="/audit"
                />,
                <Route
                  path="/item/:id"
                  render={[Function]}
                />,
                <Route
                  component={[Function]}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(HomeContainer)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                  "exact": true,
                  "path": "/",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(Audit)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                  "path": "/audit",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "path": "/item/:id",
                  "render": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
